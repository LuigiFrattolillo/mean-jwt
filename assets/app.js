var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc","$location",function(t,o,n){n.path(t.isAuth?"/":"/login"),t.$on("login",function(o,n){t.currentUser=n,t.isAuth=!0}),t.logout=function(){t.currentUser=null,n.path("/login"),o.removeToken(),t.isAuth=!1}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,n){t.login=function(e,r){o.login(e,r).then(function(o){t.$emit("login",o),console.log(o),n.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&t.isAuth?o.create({body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null}):console.log("You are not authenticated!")},o.fetch().success(function(o){t.posts=o})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(t,o,n){t.register=function(e,r){o.register(e,r).then(function(o){t.$emit("login",o),n.path("/")})}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}),o.html5Mode(!0)}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},o.register=function(n,e){return t.post("/api/users",{username:n,password:e}).then(function(){return o.login(n,e)})},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return o.token=n.data,t.defaults.headers.common["x-auth"]=n.data,o.getUser()})},o.removeToken=function(){t.defaults.headers.common["x-auth"]=""}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxHQUFBLEtBQUEsUUFBQSxPQUFBLE9BQ0EsV0NGQSxTQUFBLE9BQUEsT0FDQSxXQUFBLG1CQUFBLFNBQUEsVUFBQSxZQUFBLFNBQUEsRUFBQSxFQUFBLEdBS0EsRUFBQSxLQUhBLEVBQUEsT0FHQSxJQUZBLFVBS0EsRUFBQSxJQUFBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxZQUFBLEVBQ0EsRUFBQSxRQUFBLElBR0EsRUFBQSxPQUFBLFdBRUEsRUFBQSxZQUFBLEtBQ0EsRUFBQSxLQUFBLFVBQ0EsRUFBQSxjQUNBLEVBQUEsUUFBQSxNQ2xCQSxRQUFBLE9BQUEsT0FDQSxXQUFBLGFBQUEsU0FBQSxVQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLE1BQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxNQUFBLEVBQUEsR0FDQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsUUFBQSxHQUNBLFFBQUEsSUFBQSxHQUNBLEVBQUEsS0FBQSxXQ1BBLFFBQUEsT0FBQSxPQUNBLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQSxFQUFBLEdBR0EsRUFBQSxRQUFBLFdBRUEsRUFBQSxVQUFBLEVBQUEsT0FFQSxFQUFBLFFBRUEsS0FBQSxFQUFBLFdBQ0EsUUFBQSxTQUFBLEdBRUEsRUFBQSxNQUFBLFFBQUEsR0FFQSxFQUFBLFNBQUEsT0FRQSxRQUFBLElBQUEsK0JBS0EsRUFBQSxRQUNBLFFBQ0EsU0FBQSxHQUNBLEVBQUEsTUFBQSxPQy9CQSxRQUFBLE9BQUEsT0FDQSxRQUFBLFlBQUEsUUFBQSxTQUFBLEdBRUEsS0FBQSxNQUFBLFdBQ0EsTUFBQSxHQUFBLElBQUEsZUFHQSxLQUFBLE9BQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxLQUFBLGFBQUEsT0NSQSxRQUFBLE9BQUEsT0FDQSxXQUFBLGdCQUFBLFNBQUEsVUFBQSxZQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsU0FBQSxFQUFBLEdBQ0EsS0FBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLFFBQUEsR0FDQSxFQUFBLEtBQUEsV0NQQSxRQUFBLE9BQUEsT0FDQSxRQUFBLGlCQUFBLG9CQUFBLFNBQUEsRUFBQSxHQUNBLEVBQ0EsS0FBQSxLQUFBLFdBQUEsWUFBQSxZQUFBLGVBQ0EsS0FBQSxVQUFBLFdBQUEsWUFBQSxZQUFBLGVBQ0EsS0FBQSxhQUFBLFdBQUEsZUFBQSxZQUFBLGtCQUNBLEVBQUEsV0FBQSxNQ0pBLFFBQUEsT0FBQSxPQUNBLFFBQUEsV0FBQSxRQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsSUFFQSxHQUFBLFFBQUEsV0FDQSxNQUFBLEdBQUEsSUFBQSxjQUNBLEtBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxRQUtBLEVBQUEsU0FBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLEdBQUEsS0FBQSxjQUNBLFNBQUEsRUFBQSxTQUFBLElBQ0EsS0FBQSxXQUNBLE1BQUEsR0FBQSxNQUFBLEVBQUEsTUFJQSxFQUFBLE1BQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLEtBQUEsaUJBQ0EsU0FBQSxFQUNBLFNBQUEsSUFDQSxLQUFBLFNBQUEsR0FHQSxNQUZBLEdBQUEsTUFBQSxFQUFBLEtBQ0EsRUFBQSxTQUFBLFFBQUEsT0FBQSxVQUFBLEVBQUEsS0FDQSxFQUFBLGFBS0EsRUFBQSxZQUFBLFdBQ0EsRUFBQSxTQUFBLFFBQUEsT0FBQSxVQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENyZWF0ZSBvdXIgQXBwIG1vb2R1bGVcbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyxbXG4gICAgJ25nUm91dGUnXG5dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24gKCRzY29wZSxVc2VyU3ZjLCRsb2NhdGlvbikge1xuXG4gICAgICAgIGlmKCEkc2NvcGUuaXNBdXRoKXtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlclxuICAgICAgICAgICAgJHNjb3BlLmlzQXV0aCA9IHRydWU7XG4gICAgICAgIH0pXG5cbiAgICAgICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IG51bGw7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XG4gICAgICAgICAgICBVc2VyU3ZjLnJlbW92ZVRva2VuKCk7XG4gICAgICAgICAgICAkc2NvcGUuaXNBdXRoID0gZmFsc2U7XG5cbiAgICAgICAgfVxuICAgIH0pXG4iLCIvL0NyZWF0ZSBMb2dpbiBDb250cm9sbGVyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLFVzZXJTdmMsICRsb2NhdGlvbil7XG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcbiAgICAgICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUscGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pOyIsIi8vIENyZWF0ZSBvdXIgUG9zdEN0cmwgQ29udHJvbGxlclxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpe1xuXG4gICAgLy8gQWRkIG5ldyBQb3N0XG4gICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCRzY29wZS5wb3N0Qm9keSAmJiAkc2NvcGUuaXNBdXRoKXtcblxuICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcblxuICAgICAgICAgICAgICAgIGJvZHk6JHNjb3BlLnBvc3RCb2R5XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3Qpe1xuICAgICAgICAgICAgICAgICAgICAvLyBVbnNoaWZ0IGEgbmV3IHBvc3Qgb2JqZWN0IGluc2lkZSBwb3N0cyBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBvdXQgaW5wdXQgZmllbGRcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RCb2R5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG5cblxuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnWW91IGFyZSBub3QgYXV0aGVudGljYXRlZCEnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBGZXRjaCBhbGwgUG9zdHNcbiAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgIC5zdWNjZXNzKFxuICAgICAgICBmdW5jdGlvbihwb3N0cyl7XG4gICAgICAgICAgICAkc2NvcGUucG9zdHMgPSBwb3N0cztcbiAgICAgICAgfVxuICAgICk7XG5cblxufSk7IiwiLy8gQ3JlYXRlIFBvc3RzIFNlcnZpY2UgdG8gZmV0Y2ggYW5kIGNyZWF0ZSBwb3N0c1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAuc2VydmljZSgnUG9zdHNTdmMnLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKXtcblxuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG4gICAgfVxuXG4gICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KXtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLHBvc3QpO1xuICAgIH1cbn1dKTsiLCIvL0NyZWF0ZSBMb2dpbiBDb250cm9sbGVyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uKSB7XG4gICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpe1xuICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgIC53aGVuKCcvJywgeyBjb250cm9sbGVyOidQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnIH0pXG4gICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7Y29udHJvbGxlcjonTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6J2xvZ2luLmh0bWwnfSlcbiAgICAgICAgICAgLndoZW4oJy9yZWdpc3RlcicsIHtjb250cm9sbGVyOidSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDoncmVnaXN0ZXIuaHRtbCd9KVxuICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgICB9KTtcbiIsIi8vQ3JlYXRlIFVzZXIgU2VydmljZVxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnVXNlclN2YycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCl7XG4gICAgICAgdmFyIHN2YyA9IHRoaXM7XG5cbiAgICAgICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBzdmMucmVnaXN0ZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJldHVybiBzdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLHBhc3N3b3JkKXtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIHN2Yy50b2tlbiA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ3gtYXV0aCddID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN2Yy5yZW1vdmVUb2tlbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsneC1hdXRoJ10gPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICB9XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=